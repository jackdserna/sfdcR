install.packages("devtools")
packrat::set_opts(auto.snapshot = TRUE, use.cache = TRUE)
{install.packages(k, repos='https://cran.rstudio.com/')}
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(k)){
install.packages(k, repos='https://cran.rstudio.com/')
}
for(package_name in packages) {
library(package_name,character.only=TRUE, quietly = TRUE)
}
}
packages<- c("data.table", "dplyr", "keyring", "RForcecom", "svDialogs")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(k)){
install.packages(k, repos='https://cran.rstudio.com/')
}
for(package_name in packages) {
library(package_name,character.only=TRUE, quietly = TRUE)
}
}
packages<- c("data.table", "dplyr", "keyring", "RForcecom", "svDialogs")
Install_And_Load(packages = packages)
library(sfdcR)
packrat::set_opts(vcs.ignore.src = TRUE)
library(sfdcR)
sfdc_login()
packrat::set_opts(external.packages = c("data.table", "dplyr", "keyring", "RForcecom", "svDialogs"))
library(RForcecom)
library(sfdcR)
if(suppressWarnings(nrow(key_list("sfdc"))) == 0 || isTRUE(reset)) {
if(isTRUE(reset)){
# Do stuff for new password set up
suppressWarnings(key_delete("sfdc", username = key_list("sfdc")[1,2]))
}
### Set up
dlg_message(message = "SFDC set-up: R login via Salesforce API")
username = dlg_input("Enter a Salesforce username", Sys.info()["user"])$res
# Validate username
isValidEmail <- function(x) {
grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>",
as.character(x),
ignore.case=TRUE)
}
if(isFALSE(isValidEmail(username))) stop("Enter a valid username")
# Prompt for password information
dlg_message(paste("You will be asked for your Salesforce password.",
"This information will be saved securely saved via the keyring package."))
pw = dlg_input(message = "Enter a password associated with the sfdc username",
Sys.info()["user"])$res
dlg_message(paste("You will be asked for your Salesforce API token.",
"Salesforce automatically sends a random generated token via email.",
"To find it, login to Salesforce in web browser.",
"Go to 'My Settings'.",
"Go to 'Personal', then 'Reset My Security Token' and reset.",
"Copy the API token, and be ready to paste.", sep = " \n"))
token = dlg_input(message = "Enter the API token",
Sys.info()["user"])$res
token = trimws(token)
if(nchar(token) < 24 || nchar(token) > 25) stop("Be sure to copy and paste all of the token")
password = paste0(pw, token)
# Enter Instance URL
dlg_message("You will be asked to provide the Salesfoce domain instance URL")
instance<- dlg_input("Copy the home page URL (e.g.: https://na85.salesforce.com/ )",
Sys.info()["user"])$res
if(isFALSE(RCurl::url.exists(instance))) stop("Check your Instance in the Company Profile")
# Save
suppressWarnings(key_set_with_value(service = "sfdc",
username = username,
password = password,
keyring = instance))
suppressWarnings(key_set_with_value("instance",
username = instance,
password = ""))
}
if(isTRUE(reset)){
# Do stuff for new password set up
suppressWarnings(key_delete("sfdc", username = key_list("sfdc")[1,2]))
}
library(keyring)
reset=FALSE
if(isTRUE(reset)){
# Do stuff for new password set up
suppressWarnings(key_delete("sfdc", username = key_list("sfdc")[1,2]))
}
key_list("sfdc")
nrow(key_list("sfdc"))
suppressWarnings(nrow(key_list("sfdc")))
suppressWarnings(nrow(key_list("sfdc"))) ==0
# Prompt for password information
dlg_message(paste("You will be asked for your Salesforce password.",
"This information will be saved securely saved via the keyring package."))
pw = dlg_input(message = "Enter a password associated with the sfdc username",
Sys.info()["user"])$res
### Set up ####
dlg_message(message = "SFDC set-up: R login via Salesforce API")
username = dlg_input("Enter a Salesforce username", Sys.info()["user"])$res
# Validate username
isValidEmail <- function(x) {
grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>",
as.character(x),
ignore.case=TRUE)
}
if(isFALSE(isValidEmail(username))) stop("Enter a valid username")
# Prompt for password information
dlg_message(paste("You will be asked for your Salesforce password.",
"This information will be saved securely saved via the keyring package."))
pw = dlg_input(message = "Enter a password associated with the sfdc username",
Sys.info()["user"])$res
dlg_message(paste("You will be asked for your Salesforce API token.",
"Salesforce automatically sends a random generated token via email.",
"To find it, login to Salesforce in web browser.",
"Go to 'My Settings'.",
"Go to 'Personal', then 'Reset My Security Token' and reset.",
"Copy the API token, and be ready to paste.", sep = " \n"))
token = dlg_input(message = "Enter the API token",
Sys.info()["user"])$res
token = trimws(token)
if(nchar(token) < 24 || nchar(token) > 25) stop("Be sure to copy and paste all of the token")
password = paste0(pw, token)
# Enter Instance URL
dlg_message("You will be asked to provide the Salesfoce domain instance URL")
instance<- dlg_input("Copy the home page URL (e.g.: https://na85.salesforce.com/ )",
Sys.info()["user"])$res
if(isFALSE(RCurl::url.exists(instance))) stop("Check your Instance in the Company Profile")
# Save
suppressWarnings(key_set_with_value(service = "sfdc",
username = username,
password = password,
keyring = instance)) # cannot set keyring value?
key_list("sfdc")
keyring_list(instance)
keyring_list(paste(instance))
suppressWarnings(key_set_with_value("instance",
username = instance,
password = ""))
key_list("instance")
# Login to Salesforce API
session<- rforcecom.login(username = suppressWarnings(key_list("sfdc")[1,2]),
password = suppressWarnings(key_get("sfdc",
username = key_list("sfdc")[1,2])),
loginURL = suppressWarnings(key_list("instance")[1,2]))
paste3 <- function(...,sep = sep) {
L <- list(...)
L <- lapply(L,function(x) {x[is.na(x)] <- ""; x})
ret <-gsub(paste0("(^",sep,"|",sep,"$)"),"",
gsub(paste0(sep,sep),sep,
do.call(paste,c(L,list(sep=sep)))))
is.na(ret) <- ret==""
ret
}
l<- c("yourname", NA, "Yuri")
paste3(l)
l
l<- c("yourname", "NA", "Yuri")
l
l<- list("yourname", "NA", "Yuri")
l
paste3(l)
l<- c("yourname", "yuri")
paste3(l)
paste3(l, sep = "")
l<- c("yourname", NA, "Yuri")
paste3(l, sep = )
paste3(l, sep = "")
l<- c("yourname", "NA", "Yuri")
l
paste3(l)
paste3(l, sep ="")
list = paste3(l)
list = paste3(l, sep = "")
list
na.omit(l)
l<- c("yourname", NA, "Yuri")
na.omit
na.omit(l)
install.packages("reshape2")
library(reshape2)
collect<- function(data, index, cols, ...){
data[, cols[1]]<- index # Create column "parent_object" and value is equal to object name
data<- data[, cols]
data[]<- lapply(data, as.character)
bind_rows(data, SFDC_arch)
}
### Object Metadata
object_meta<- rforcecom.getObjectList(session)
cols = c("parent_object", "label", "name", "custom", "type", "calculated", "permissionable",
"nillable", "restrictedPicklist", "scale","referenceTo") # Standard metadata
cols = append(cols, colnames(data)[grep("referenceTo", colnames(data))]) # Field Specific metadata
View(object_meta)
colnames(object_meta)[grep("referenceTo", colnames(object_meta))]
View(object_meta)
View(object_meta)
session<- sfdcR::sfdc_login()
library(keyring)
library(RForcecom)
key_list("sfdc")
session<- sfdcR::sfdc_login()
key_list("sfdc")
key_list("instance")
objects = rforcecom.getObjectList(session)[,c("label", "name")]
objects[] = lapply(objects, as.character)
object = objects[objects$label %in%
dlg_list(objects$label,
Sys.info()["user"])$res,
"name"]
fields = rforcecom.getObjectDescription(session, object)
fields[] = lapply(fields, as.character)
query = fields[(fields$label %in%
dlg_list(arrange(fields, label)$label,
multiple = TRUE,
title = "Select the field(s) to pull",
Sys.info()["user"])$res),
"name"]
query = paste("SELECT", paste(fields, collapse = ", "), "FROM", object)
query
View(fields)
fields[fields$name == "MasterRecordId", "type"]
dlg_list(arrange(fields, label)$label,
title = filterTitle,
Sys.info()["user"])$res
filterList<- "WHERE"
filterTitle = paste("Filter Logic:", filterList)
dlg_list(arrange(fields, label)$label,
title = filterTitle,
Sys.info()["user"])$res
fields["Account ID", "namre"]
fields["Account ID", "name"]
fields$label %in% "Account ID"
fields[fields$label %in% "Account ID","name"]
fields[fields$label == "Account ID", "name"]
View(fields)
data<- sfdcR::sfdc_basicQuery(session,
"Account",
"SELECT Id, Name FROM Account WHERE Id IN
SELECT AccountId FROM Opportunity WHERE StageName = 'Closed Lost'")
table(fields$type)
type = "picklist"
filter.signs<- c('=', '!=', '<', '<=', '>', '>=', 'LIKE',
"IN", 'NOT IN', 'INCLUDES', 'EXCLUDES')
dateLiterals<- c('YESTERDAY', 'TODAY', 'TOMORROW', 'LAST_WEEK',
'THIS_WEEK', 'NEXT_WEEK', 'LAST_MONTH', 'THIS_MONTH',
'NEXT_MONTH', 'LAST_90_DAYS', 'NEXT_90_DAYS',
'THIS_QUARTER', 'LAST_QUARTER', 'NEXT_QUARTER',
'THIS_YEAR', 'LAST_YEAR', 'NEXT_YEAR',
'THIS_FISCAL_QUARTER', 'LAST_FISCAL_QUARTER',
'NEXT_FISCAL_QUARTER', 'THIS_FISCAL_YEAR',
'LAST_FISCAL_YEAR', 'NEXT_FISCAL_YEAR')
dateInput<- c('LAST_N_DAYS:', 'NEXT_N_DAYS:', 'NEXT_N_WEEKS:',
'LAST_N_WEEKS:', 'NEXT_N_MONTHS:', 'LAST_N_MONTHS:',
'NEXT_N_QUARTERS:', 'LAST_N_QUARTERS:', 'NEXT_N_YEARS:',
'LAST_N_YEARS:', 'NEXT_N_FISCAL_QUARTERS:',
'LAST_N_FISCAL_QUARTERS:', 'NEXT_N_FISCAL_YEARS:',
'LAST_N_FISCAL_YEARS:')
dateRange <- "Custom Date Range"
dateCustom<- "Custom Date"
Null<- "null"
save(filter.signs, file = "data/filter.signs.RData")
save(filter.signs, file = "data/filter_signs.RData")
save(dateLiterals, file = "data/date_literals.RData")
save(dateInput, file = "data/date_input.RData")
switch(type,
"picklist" = filter.signs[1:2, 10:11])
switch(type,
picklist = filter.signs[1:2, 10:11])
switch(type,
picklist = filter.signs[c(1:2, 10:11)])
switch(type,
picklist <-  filter.signs[c(1:2, 10:11)])
grep("picklistValues.value", colnames(fields))
colnames(fields)[grep("picklistValues.value", colnames(fields))]
filterBy<- fields[fields$label %in%
dlg_list(arrange(fields, label)$label,
title = filterTitle,
Sys.info()["user"])$res, "name"]
filter.signs = filter.signs[c(1:2, 10:11)]
cols<- colnames(fields)[grep("picklistValues.value", colnames(fields))]
list<- t(fields[fields$name == filterBy, cols])
list
list<- t(na.omit(fields[fields$name == filterBy, cols]))
llist
list
View(list)
list<- na.omit(t(fields[fields$name == filterBy, cols]))
View(list)
prompt<- dlg_list(c("One", "Multiple")
message = "Do you want to filter by one or multiple picklist values?",
Sys.info()["user"])$res
prompt<- dlg_list(c("One", "Multiple"),
message = "Do you want to filter by one or multiple picklist values?",
Sys.info()["user"])$res
dlg_message(c("Any", "All"),
title = "Values returned are contain any (OR) of the the folowing, or all (AND)",
Sys.info()["user"])$res
dlg_list(c("Any", "All"),
title = "Values returned are contain any (OR) of the the folowing, or all (AND)",
Sys.info()["user"])$res
assign(filter.value, paste(dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res), collapse = ";")
paste(dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res, collapse = ";")
filter.sign = dlg_list(filter.signs,
title = paste(filterTitle, filterBy),
Sys.info()["user"])$res
paste(dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res, collapse = ";")
prompt<- dlg_list(c("One", "Multiple"),
title = "Do you want to filter by one or multiple picklist values?",
Sys.info()["user"])$res
switch(prompt,
Multiple = {mode<- dlg_list(c("Any", "All"),
title = "Values returned contain any (OR) of the the following, or all (AND)",
Sys.info()["user"])$res;
switch (mode,
Any = assign(filter.value, dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res),
All = assign(filter.value, paste(dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res, collapse = ";"))
)
},
One = assign(filter.value, dlg_list(list,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res)
)
switch(prompt,
Multiple = {mode<- dlg_list(c("Any", "All"),
title = "Values returned contain any (OR) of the the following, or all (AND)",
Sys.info()["user"])$res;
switch (mode,
Any = assign("filter.value", dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res),
All = assign("filter.value", paste(dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res, collapse = ";"))
)
},
One = assign("filter.value", dlg_list(list,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res)
)
prompt<- dlg_list(c("One", "Multiple"),
title = "Do you want to filter by one or multiple picklist values?",
Sys.info()["user"])$res
switch(prompt,
Multiple = {mode<- dlg_list(c("Any", "All"),
title = "Values returned contain any (OR) of the the following, or all (AND)",
Sys.info()["user"])$res;
switch (mode,
Any = assign("filter.value", dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res),
All = assign("filter.value", paste(dlg_list(list,
multiple = TRUE,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res, collapse = ";"))
)
},
One = assign("filter.value", dlg_list(list,
title = paste(filterTitle, filterBy, filter.sign),
Sys.info()["user"])$res)
)
filter.value
session<- sfdcR::sfdc_login()
key_set("sfdc", username = "jackdanielserna@live.com")
key_set("instance", "https://na85.salesforce.com/")
key_set("instance", "https://na85.salesforce.com/")
# Login to Salesforce API
session<- rforcecom.login(username = suppressWarnings(key_list("sfdc")[1,2]),
password = suppressWarnings(key_get("sfdc",
username = key_list("sfdc")[1,2])),
loginURL = suppressWarnings(key_list("instance")[1,2]))
objects = rforcecom.getObjectList(session)[,c("label", "name")]
objects[] = lapply(objects, as.character)
object = objects[objects$label %in%
dlg_list(objects$label,
Sys.info()["user"])$res,
"name"]
fields = rforcecom.getObjectDescription(session, object)
fields[] = lapply(fields, as.character)
View(fields)
ifelse(!is.null(filter.list),  return(paste("SELECT", fields, "FROM", object)),
return(paste("SELECT", fields, "FROM", object)))
strQuery<- function(fields, object, filter.list = NULL){
ifelse(!is.null(filter.list),  return(paste("SELECT", fields, "FROM", object)),
return(paste("SELECT", fields, "FROM", object)))
}
# test query or relationship fields
query<- strQuery(fields = paste("AccountId.Name",
"AccountId.Type",
"Birthdate", sep = ", "),
object = object)
query
test<- sfdcR::sfdc_basicQuery(session, object, query)
# test query or relationship fields
query<- strQuery(fields = paste("Account.Name",
"Account.Type",
"Birthdate", sep = ", "),
object = object)
test<- sfdcR::sfdc_basicQuery(session, object, query)
View(test)
View(test)
View(fields)
object = objects[objects$label %in%
dlg_list(objects$label,
Sys.info()["user"])$res,
"name"]
fields = rforcecom.getObjectDescription(session, object)
fields[] = lapply(fields, as.character)
View(fields)
query = fields[(fields$label %in%
dlg_list(arrange(fields, label)$label,
multiple = TRUE,
title = "Select the field(s) to pull",
Sys.info()["user"])$res),
"name"]
# Get field types to allow for smart querying
type <- fields[fields$name == query, "type"]
query
# Get field types to allow for smart querying
type <- fields[fields$name %in% query, "type"]
type
# Test for reference fields to initiate smart query
ref<- grep("ref", type)
ref
ref[1]
ref[2]
ref[3]
ref>0
length(ref)
library(sfdcR)
packrat::set_opts(external.packages = "")
library(sfdcR)
install.packages("RForcecom")
install.packages("keyring")
install.packages("data.table")
install.packages("tidyverse")
install.packages("svDialogs")
??switch
library(sfdcR)
install.packages("devtools")
devtools::install_github("jackdserna/sfdcR")
devtools::install_git()
install.packages("roxygen2")
install.packages("usethis")
usethis::use_devtools()
userthis::use_site_report
usethis::git_sitrep()
usethis::browse_github_token()
usethis::edit_r_environ()
Sys.getenv()
usethis::git_sitrep()
devtools::install_github("jackdserna/sfdcR")
usethis::edit_r_profile()
usethis::git_sitrep()
usethis::git_protocol()
usethis::git_sitrep()
usethis::git_sitrep()
usethis::use_github()
usethis::use_github()
usethis::use_github()
usethis::use_github()
devtools::install_github("jackdserna/sfdcR")
usethis::git_sitrep()
usethis::git_sitrep()
git2r::libgit2_features()
git2r::libgit2_version()
